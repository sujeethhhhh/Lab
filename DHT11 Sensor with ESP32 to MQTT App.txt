humidity on an MQTT App. 
#include <WiFi.h> 
#include <PubSubClient.h> 
#include "DHT.h" 
 
// DHT11 configuration 
#define DHTPIN 14 
#define DHTTYPE DHT11 
DHT dht(DHTPIN, DHTTYPE); 
 
// WiFi credentials 
const char* ssid = "name"; 
const char* password = "password"; 
 
// MQTT broker details 
const char* mqtt_server = "broker.emqx.io"; 
const int mqtt_port = 1883; 
const char* client_id = "db032482-2f62-4ba8-9782-da6521020775"; 
const char* topic = "quantanics/industry/dht11_data"; 
 
WiFiClient espClient; 
PubSubClient client(espClient); 
 
void setup() { 
  Serial.begin(115200); 
  dht.begin(); 
 
  // Connect to WiFi 
  WiFi.begin(ssid, password); 
  while (WiFi.status() != WL_CONNECTED) { 
    delay(1000); 
    Serial.println("Connecting to WiFi..."); 
  } 
  Serial.println("WiFi connected"); 
 
  // Setup MQTT server 
  client.setServer(mqtt_server, mqtt_port); 
} 
 
void reconnect() { 
  while (!client.connected()) { 
    Serial.println("Connecting to MQTT..."); 
    if (client.connect(client_id)) { 
      Serial.println("Connected to MQTT broker"); 
    } else { 
      Serial.print("Failed, rc="); 
      Serial.print(client.state()); 
      Serial.println(" Retrying in 5 seconds..."); 
      delay(5000); 
    } 
  } 
} 
 
void loop() { 
  if (!client.connected()) { 
    reconnect(); 
  } 
  client.loop(); 
 
  // Read temperature and humidity 
  float humidity = dht.readHumidity(); 
  float temperature = dht.readTemperature(); 
 
  if (isnan(humidity) || isnan(temperature)) { 
    Serial.println("Failed to read from DHT sensor!"); 
    return; 
  } 
 
  // Create message 
  String payload = "Temp: " + String(temperature) + " Â°C, Humidity: " + String(humidity) + " %"; 
 
  // Publish and print 
  client.publish(topic, payload.c_str()); 
  Serial.println(payload); 
 
  delay(2000); // Wait before next reading 
}