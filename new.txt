IoT Mini Projects - QnA with Output

Q1: Develop a program using the Arduino IDE to interface an Ultrasonic sensor with an Arduino Uno and display the measured distance on the ThingSpeak cloud platform using the required communication interface.

#include <ESP8266WiFi.h>
#include <ThingSpeak.h>
#include <NewPing.h>

#define TRIGGER_PIN  5
#define ECHO_PIN     4
#define MAX_DISTANCE 200

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
WiFiClient client;

unsigned long myChannelNumber = YOUR_CHANNEL_NUMBER;
const char * myWriteAPIKey = "YOUR_API_KEY";

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

void setup() {
  Serial.begin(1150);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  ThingSpeak.begin(client);
}

void loop() {
  delay(2000);
  int distance = sonar.ping_cm();
  ThingSpeak.setField(1, distance);
  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
}
Output: Distance values are uploaded to ThingSpeak every 2 seconds.


Q2: Develop a program using the Arduino IDE to interface a DHT11 sensor with an Arduino Uno and display the measured data on an MQTT App. Use the required communication interface.

#include <DHT.h>
#include <PubSubClient.h>
#include <ESP8266WiFi.h>

#define DHTPIN 2
#define DHTTYPE DHT11

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqtt_server = "broker.hivemq.com";

WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  dht.begin();
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  client.setServer(mqtt_server, 1883);
}

void loop() {
  if (!client.connected()) {
    client.connect("arduinoClient");
  }
  client.loop();

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (!isnan(temp) && !isnan(hum)) {
    String payload = "Temperature: " + String(temp) + ", Humidity: " + String(hum);
    client.publish("dht11/data", payload.c_str());
  }
  delay(2000);
}
Output: MQTT App receives temperature and humidity data.


Q3: Develop a program using the Arduino IDE to interface the DHT11 sensor with the ESP32 to measure temperature and humidity. Transmit the received data to the ThingSpeak cloud platform and visualize the readings in real time.

#include <WiFi.h>
#include <DHT.h>
#include "ThingSpeak.h"

#define DHTPIN 4
#define DHTTYPE DHT11

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
WiFiClient client;

unsigned long channelID = YOUR_CHANNEL_NUMBER;
const char* writeAPIKey = "YOUR_API_KEY";

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  dht.begin();
  ThingSpeak.begin(client);
}

void loop() {
  float t = dht.readTemperature();
  float h = dht.readHumidity();
  if (!isnan(t) && !isnan(h)) {
    ThingSpeak.setField(1, t);
    ThingSpeak.setField(2, h);
    ThingSpeak.writeFields(channelID, writeAPIKey);
  }
  delay(2000);
}
Output: Temperature and humidity readings appear on ThingSpeak.


Q4: Using Arduino IDE, develop a program to interface an Ultrasonic sensor with the ESP32 to measure the distance of an object. Display the distance on the ThingSpeak cloud platform.

#include <WiFi.h>
#include <ThingSpeak.h>

#define TRIG 13
#define ECHO 12

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
WiFiClient client;

unsigned long channelID = YOUR_CHANNEL_NUMBER;
const char* writeAPIKey = "YOUR_API_KEY";

void setup() {
  Serial.begin(115200);
  pinMode(TRIG, OUTPUT);
  pinMode(ECHO, INPUT);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  ThingSpeak.begin(client);
}

void loop() {
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);

  long duration = pulseIn(ECHO, HIGH);
  int distance = duration * 0.034 / 2;

  ThingSpeak.setField(1, distance);
  ThingSpeak.writeFields(channelID, writeAPIKey);
  delay(2000);
}
Output: Real-time distance values uploaded to ThingSpeak.


Q5: Write a program to interface the DHT11 sensor with the ESP32 and display the measured temperature and humidity on an MQTT App.

#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

#define DHTPIN 4
#define DHTTYPE DHT11

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqtt_server = "broker.hivemq.com";

WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  dht.begin();
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  client.setServer(mqtt_server, 1883);
}

void loop() {
  if (!client.connected()) {
    client.connect("ESP32Client");
  }
  client.loop();

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (!isnan(temp) && !isnan(hum)) {
    String payload = "Temp: " + String(temp) + ", Hum: " + String(hum);
    client.publish("esp32/dht11", payload.c_str());
  }
  delay(2000);
}
Output: MQTT App shows live temperature and humidity.



Q6: Write a program to interface an Ultrasonic sensor with the ESP32 to measure the distance of an obstacle. Implement the MQTT protocol to transmit and publish the measured distance to MQTTBox.

#include <WiFi.h>
#include <PubSubClient.h>

#define TRIG 13
#define ECHO 12

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqtt_server = "broker.hivemq.com";

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  pinMode(TRIG, OUTPUT);
  pinMode(ECHO, INPUT);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  client.setServer(mqtt_server, 1883);
}

void loop() {
  if (!client.connected()) {
    client.connect("ESP32Ultrasonic");
  }
  client.loop();

  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);
  long duration = pulseIn(ECHO, HIGH);
  int distance = duration * 0.034 / 2;

  String payload = "Distance: " + String(distance);
  client.publish("esp32/ultrasonic", payload.c_str());
  delay(2000);
}
Output: MQTTBox receives distance values from the ESP32.


Q7: Write a program to interface a Soil Moisture sensor with the ESP32 to measure the moisture content. Implement the MQTT protocol to transmit the data to MQTTBox and display the readings in real time.

#include <WiFi.h>
#include <PubSubClient.h>

const int sensorPin = 34;

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqtt_server = "broker.hivemq.com";

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  client.setServer(mqtt_server, 1883);
}

void loop() {
  if (!client.connected()) {
    client.connect("ESP32SoilMoisture");
  }
  client.loop();

  int moisture = analogRead(sensorPin);
  String payload = "Soil Moisture: " + String(moisture);
  client.publish("esp32/soil", payload.c_str());
  delay(2000);
}
Output: MQTTBox displays real-time soil moisture levels.


Q8: Write a program to interface a Smoke/Gas sensor with the ESP32 to measure the quality of air and display the data on an MQTT App.

#include <WiFi.h>
#include <PubSubClient.h>

const int gasPin = 35;

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqtt_server = "broker.hivemq.com";

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  client.setServer(mqtt_server, 1883);
}

void loop() {
  if (!client.connected()) {
    client.connect("ESP32GasSensor");
  }
  client.loop();

  int gasValue = analogRead(gasPin);
  String payload = "Gas Level: " + String(gasValue);
  client.publish("esp32/gas", payload.c_str());
  delay(2000);
}
Output: Air quality data shown on MQTT App.


Q9: Develop a program using the Arduino IDE to interface a Smoke/Gas sensor with the ESP32 to measure the quality of air. Transmit the data to the ThingSpeak cloud platform and publish it.

#include <WiFi.h>
#include <ThingSpeak.h>

const int gasPin = 35;

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
WiFiClient client;

unsigned long channelID = YOUR_CHANNEL_NUMBER;
const char* writeAPIKey = "YOUR_API_KEY";

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  ThingSpeak.begin(client);
}

void loop() {
  int gasValue = analogRead(gasPin);
  ThingSpeak.setField(1, gasValue);
  ThingSpeak.writeFields(channelID, writeAPIKey);
  delay(2000);
}
Output: ThingSpeak shows live air quality data.


Q10: Develop a Python program to interface an Ultrasonic sensor with a Raspberry Pi to measure the distance of an object. Implement the MQTT protocol to transmit the data to MQTTBox and display the readings in real time.

import RPi.GPIO as GPIO
import time
import paho.mqtt.client as mqtt

TRIG = 23
ECHO = 24

broker = "broker.hivemq.com"
client = mqtt.Client("RaspiUltrasonic")
client.connect(broker)

GPIO.setmode(GPIO.BCM)
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)

while True:
    GPIO.output(TRIG, False)
    time.sleep(2)
    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)

    while GPIO.input(ECHO) == 0:
        pulse_start = time.time()

    while GPIO.input(ECHO) == 1:
        pulse_end = time.time()

    duration = pulse_end - pulse_start
    distance = round(duration * 17150, 2)

    payload = f"Distance: {distance} cm"
    client.publish("raspi/ultrasonic", payload)
Output: MQTTBox receives distance data from Raspberry Pi.


Q11: Develop a Python program to interface a DHT11 sensor with a Raspberry Pi to measure temperature and humidity and display the data on an MQTT App.

import Adafruit_DHT
import paho.mqtt.client as mqtt
import time

sensor = Adafruit_DHT.DHT11
pin = 4

broker = "broker.hivemq.com"
client = mqtt.Client("RaspiDHT")
client.connect(broker)

while True:
    humidity, temperature = Adafruit_DHT.read(sensor, pin)
    if humidity is not None and temperature is not None:
        payload = f"Temp: {temperature} C, Humidity: {humidity} %"
        client.publish("raspi/dht", payload)
    time.sleep(2)
Output: MQTT App receives live temperature and humidity data.

