#include <ESP8266WiFi.h> 
 
// Wi-Fi credentials 
const char* ssid = "Redmi Note 12 Pro 5G"; 
const char* password = "redmi1212"; 
 
// ThingSpeak API settings 
const char* host = "api.thingspeak.com"; 
String apiKey = "K074D92MRK95XA8S"; 
 
// Ultrasonic sensor pins 
#define TRIG_PIN 16  // Change based on your wiring 
#define ECHO_PIN 17 // Change based on your wiring 
 
WiFiClient client; 
 
void setup() { 
  Serial.begin(115200); 
 
  // Setup ultrasonic sensor pins 
  pinMode(TRIG_PIN, OUTPUT); 
  pinMode(ECHO_PIN, INPUT); 
 
  // Connect to Wi-Fi 
  WiFi.begin(ssid, password); 
  Serial.print("Connecting to Wi-Fi"); 
  while (WiFi.status() != WL_CONNECTED) { 
    delay(1000); 
    Serial.print("."); 
  } 
  Serial.println("\nConnected to Wi-Fi!"); 
} 
 
void loop() { 
  // Trigger ultrasonic pulse 
  digitalWrite(TRIG_PIN, LOW); 
  delayMicroseconds(2); 
  digitalWrite(TRIG_PIN, HIGH); 
  delayMicroseconds(10); 
  digitalWrite(TRIG_PIN, LOW); 
 
  // Measure echo duration 
  long duration = pulseIn(ECHO_PIN, HIGH); 
  // Calculate distance in cm 
  float distance = duration * 0.034 / 2; 
 
  Serial.print("Distance: "); 
  Serial.print(distance); 
  Serial.println(" cm"); 
 
  // Send to ThingSpeak 
  if (client.connect(host, 80)) { 
    String url = "/update?api_key=" + apiKey + "&field1=" + 
String(distance); 
    client.print(String("GET ") + url + " HTTP/1.1\r\n" + 
                 "Host: " + host + "\r\n" + 
                 "Connection: close\r\n\r\n"); 
    client.stop(); 
  } 
 
  delay(500); // ThingSpeak rate limit: 15 sec 
}




new codeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
#include <SoftwareSerial.h>

#define TRIG_PIN 8  // Trig pin of ultrasonic sensor
#define ECHO_PIN 9  // Echo pin of ultrasonic sensor

SoftwareSerial ESP8266(2, 3); // RX, TX

const char* SSID = "YOUR_SSID";        // Replace with your WiFi SSID
const char* PASSWORD = "YOUR_PASSWORD"; // Replace with your WiFi password
const char* API_KEY = "YOUR_API_KEY";  // Replace with your ThingSpeak API Key

void setup() {
  Serial.begin(115200);
  ESP8266.begin(115200);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  Serial.println("Connecting to WiFi...");
  connectToWiFi();
}

void loop() {
  long duration;
  float distance;

  // Trigger ultrasonic pulse
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Read the echo time
  duration = pulseIn(ECHO_PIN, HIGH);
  distance = (duration * 0.0343) / 2; // Convert to cm

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  sendToThingSpeak(distance);

  delay(20000); // Send data every 20 seconds
}

// Function to connect ESP8266 to WiFi
void connectToWiFi() {
  ESP8266.println("AT+RST");
  delay(1000);
  ESP8266.println("AT+CWMODE=1");
  delay(1000);

  String cmd = "AT+CWJAP=\"" + String(SSID) + "\",\"" + String(PASSWORD) + "\"";
  ESP8266.println(cmd);
  delay(5000);

  if (ESP8266.find("WIFI CONNECTED")) {
    Serial.println("WiFi Connected!");
  } else {
    Serial.println("Failed to Connect!");
  }
}

// Function to send data to ThingSpeak
void sendToThingSpeak(float distance) {
  String request = "GET /update?api_key=" + String(API_KEY) +
                   "&field1=" + String(distance) + "\r\n";

  ESP8266.println("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80");
  delay(2000);

  ESP8266.println("AT+CIPSEND=" + String(request.length() + 2));
  delay(1000);

  ESP8266.print(request);
  delay(1000);

  ESP8266.println("AT+CIPCLOSE");
  Serial.println("Data Sent to ThingSpeak");
}